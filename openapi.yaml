openapi: 3.1.0
info:
  version: '0.0.1'
  title: 'Geek.Zone API'
  license:
    name: GPLv3
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
paths:
  /auth/mobile-token:
    post:
      summary: 'Primary authentication endpoint for mobile application'
      operationId: mobileToken
      security: []
      requestBody:
        description: 'Authentication credentials'
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userid:
                  type: string
                password:
                  type: string
            example:
              userid: 'someuser@example.com'
              password: 'some_secure_password'
      responses:
        '200':
          description: 'Successful authentication'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        '403':
          description: 'Authentication failed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/mobile-token-refresh:
    post:
      summary: 'Refresh an existing session for a mobile application'
      operationId: mobileTokenRefresh
      security:
        - bearerAuth: [AcceptExpired]
      requestBody:
        description: 'Token refresh credentials'
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: 'Session token, may be expired'
                refreshToken:
                  type: string
                  description: 'Refresh token, must be valid on the server'
            example:
              token: 'xxx.yyy.zzzz'
              refreshToken: 'aaaa.bbbb.cccc'
      responses:
        '200':
          description: 'Successful authentication'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: 'Authentication failed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /access/physical-code/{location}:
    get:
      summary: 'Request a physical access code for a location'
      operationId: physicalAccessCode
      parameters:
        - in: path
          name: location
          schema:
            type: string
          required: true
          description: 'ID of the physical location where access is required'
      responses:
        '200':
          description: 'Valid access token'
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessCode:
                    type: string
                    description: 'Access code, valid for the selected location'
                  format:
                    type: string
                    description: 'Indication of the format of the access token, e.g. QR Code, PIN, etc.'
                  expiryTime:
                    type: string
                    description: 'Expiry time of access code in ISO-8601 format, UTC'
              examples:
                pin:
                  summary: 'Example of a PIN used for security'
                  value:
                    accessCode: 12345
                    format: PIN
                    expiryTime: 2022-09-29T00:00:00Z
                QR:
                  summary: 'Example of a QR Code used for security'
                  value:
                    accessCode: 57b4237f-8a4e-455b-87aa-b143b945e8dd
                    format: QR
                    expiryTime: 2022-09-28T21:00:00Z
                password:
                  summary: 'Example of a simple password used for security (e.g. with physical human security)'
                  value:
                    accessCode: swordfish
                    format: password
                    expiryTime: 2022-09-28T00:00:00Z

        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: 'Access denied, if, for example, the user does not have access to the requested location'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    AuthenticationResponse:
      type: object
      required:
        - token
        - refreshToken
      properties:
        token:
          type: string
          description: 'A new short-lived Authentication token to use with future requests'
        refreshToken:
          type: string
          description: 'Long-lived Refresh token to use with authentication refresh requests (may be unchanged)'
        expiryTime:
          type: string
          description: 'Expiry time of authentication token in ISO-8601 format, UTC'
      example:
        token: 'xxx.yyy.zzzz'
        refreshToken: 'aaaa.bbbb.cccc'
        expiryTime: '2022-08-28T19:31:57Z'
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    UnauthorizedError:
      description: Access token is missing or invalid
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
